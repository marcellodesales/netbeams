package org.netbeams.dsp.message;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.netbeams.dsp.ComponentIdentifier;
import org.netbeams.dsp.DSPException;
import org.netbeams.dsp.MessageBrokerAccessor;
import org.netbeams.dsp.data.MessageContent;

public abstract class Message {
		
	private String messageId;
	private Date creationTime;
	private ComponentIdentifier producer;
	private String correlationId;
	private List<ComponentIdentifier> consumers;
	private MessageContent content;

	
	public Message(ComponentIdentifier producer, MessageContent content) {
		this.producer = producer;
		this.content = content;
		consumers = new ArrayList<ComponentIdentifier>();
		messageId = String.valueOf(System.nanoTime());
		creationTime = new Date();
	}
	
	
	/**
	 * Each message generated by the <code>MessageFactory</code> is receives a idenfication
	 * that is guaranteed to be unique.
	 * 
	 * @return
	 */
	public String getMessageId(){
		//TODO: Define the id genertion mechanism
		return messageId;
	}
	
	public Date getCreationTime(){
		return creationTime;
	}
	
	/**
	 * A message may use the correlation ID to refer to another message.
	 * 
	 * @return
	 */
	public String getCorrelationId() {
		return correlationId;
	}

	public void setCorrelationId(String correlationId) {
		this.correlationId = correlationId;
	}	
	
	/**
	 * QoS
	 * 
	 * @return
	 */
	public String getDeliveryMode(){
		return null;
	}
	public void setDeliveryMode(String deliveryMode){
		
	}
	
	
	public int getPriority(){
		return 0;
	}
	public void setPriority(){
	}
	
	
	/**
	 * 
	 * @return
	 */
	public String getType(){
		return content.getContentType();
	}
	
	
	/**
	 * Component that produce the data.
	 * 
	 * @return
	 */
	public ComponentIdentifier getProducer(){
		return producer;
	}
	
	/**
	 * Optional list of consumers. The Platform will only deliver to these consumers even if more cosumers are registered 
	 * to consume this message.
	 * 
	 * When a message is used as request to {@link MessageBrokerAccessor#pull(Message)} it MUST have one, and only one, consumer.
	 * 
	 * @return
	 */
	public List<ComponentIdentifier> getConsumers(){
		return consumers;
	}
	
	/**
	 * Optionally informs which consumers this message can be delivered. This method MUST be called
	 * before the message is sent to the message broker
	 * 
	 * @param consumer Targets for this message
	 * @throws DSPException If the message already has consumers.
	 */
	public void add(ComponentIdentifier consumer){
		consumers.add(consumer);	
	}
		
	/**
	 * This method provides the actual message content. The content was generated by the producer, encapulated 
	 * into the message and transported to the consumer.
	 * 
	 * @return
	 */
	public MessageContent getContent(){
		return content;
	}
		
	

}
