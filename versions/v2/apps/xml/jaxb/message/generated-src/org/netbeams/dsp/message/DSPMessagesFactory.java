package org.netbeams.dsp.message;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Element;

/**
 * This is a factory method of the DSP messages
 * 
 * @author marcello
 */
public enum DSPMessagesFactory {

    /**
     * The singleton version of this factory
     */
    INSTANCE;

    /**
     * The DSP messages factory object generated by JAXB
     */
    private ObjectFactory factory;

    private DSPMessagesFactory() {
        this.factory = new ObjectFactory();
    }

    /**
     * @param compId is the identification of the component
     * @param location is the location of the component. It must be a machine name or ip address.
     * @param compType is the complete name of the 
     * @return a new instance of a Component Identifier with the specified data.
     */
    public ComponentIdentifier makeDSPComponentIdentifier(String compId, String location, String compType) {
        ComponentLocator loc = this.factory.createComponentLocator();
        loc.setComponentNodeId(compId);
        AbstractNodeAddress nadd = this.factory.createAbstractNodeAddress();
        nadd.setValue(location);
        loc.setNodeAddress(nadd);
        ComponentIdentifier pIdent = this.factory.createComponentIdentifier();
        pIdent.setComponentLocator(loc);
        pIdent.setComponentType(compType);
        return pIdent;
    }

    /**
     * @param correlationId
     * @param creationTime is the 
     * @param producer is the ComponentIdentifier instance for the producer.
     * @param consumer is the ComponentIdentifier instance for the consumer.
     * @return a new instance of the Header for the DSP Message
     */
    public Header makeDSPMessageHeader(String correlationId, long creationTime, ComponentIdentifier producer,
            ComponentIdentifier consumer) {
        Header header = this.factory.createHeader();
        header.setCorrelationID(correlationId);
        header.setCreationTime(creationTime);
        header.setProducer(producer);
        header.setConsumer(consumer);
        return header;
    }

    /**
     * @param messageId is the message ID
     * @param contentType is the description of the main class, with the complete name (org.netbeans.dsp.demo.Stick)
     * @param header is the information of the header. 
     * @param bodyNode is the instance of a JAXB generated object
     * @return an instance of the Measure Message with the given Id, header and the body with the given contentType. 
     * @throws JAXBException if there's a parsing error from JAXB
     * @throws ParserConfigurationException if there's a problem parsing the body object
     */
    public MeasureMessage makeDSPMessage(String messageId, String contentType, Header header, Object bodyNode)
            throws JAXBException, ParserConfigurationException {
        MeasureMessage m1 = this.factory.createMeasureMessage();
        m1.setContentType(contentType);
        m1.setMessageID(messageId);
        m1.setHeader(header);

        Body body = this.factory.createBody();
        JAXBContext context = JAXBContext.newInstance(contentType);
        Marshaller m = context.createMarshaller();
        Element xmlDocumentNode = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument()
                .createElement("temp");
        m.marshal(bodyNode, xmlDocumentNode);
        body.setAny(xmlDocumentNode.getFirstChild());
        m1.setBody(body);
 
        return m1;
    }
    
    /**
     * The ISO time specification is as follows:
     * 
     * <br>2002-05-30T09:30:10-06:00 shows the GMT -6 time or
     * <br>2002-05-30T09:30:10Z shows the UTC/GMT default time
     * 
     * @return make a new current ISO time format used to be interoperable with other programming
     * languages.
     */
    public String makeCurrentIsoDateTime() {
//        final int msInMin = 60000;
//        final int minInHr = 60;
//        Date date = new Date();
//        int Hours, Minutes;
//        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG );
//        TimeZone zone = dateFormat.getTimeZone();
//        System.out.println( "BST Time: " + dateFormat.format( date ) );
//        Minutes =zone.getOffset( date.getTime() ) / msInMin;
//        Hours = Minutes / minInHr;
//        zone = zone.getTimeZone( "GMT Time" +(Hours>=0?"+":"")+Hours+":"+ Minutes);
        // dateFormat.setTimeZone( zone );
        // System.out.println( "GMT: " + dateFormat.format( date ) );
        //        
         Date now = new Date();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
//         System.out.println("ISO 8601: "+sdf.format( now ));
         return sdf.format(now);
        //        
        // Date now2 = sdf.parse(sdf.format( now ));
        // System.out.println("ISO 8601: "+sdf.format( now2 ));

    }

    /**
     * @return a new instance of the DSP Messages Container with the correct new values of the
     * UUID and the creation time of the message.
     */
    public MessagesContainer makeDSPMessagesContainer() {
        MessagesContainer messages = this.factory.createMessagesContainer();
        messages.setCreationTime(this.makeCurrentIsoDateTime());
        messages.setUudi(UUID.randomUUID().toString());
        return messages;
    }
}
